// Code generated by Kitex v0.9.1. DO NOT EDIT.

package authservice

import (
	"context"
	"errors"
	auth "github.com/PiaoAdmin/gomall/rpc_gen/kitex_gen/auth"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"IssueToken": kitex.NewMethodInfo(
		issueTokenHandler,
		newIssueTokenArgs,
		newIssueTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"VerifyToken": kitex.NewMethodInfo(
		verifyTokenHandler,
		newVerifyTokenArgs,
		newVerifyTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RefreshToken": kitex.NewMethodInfo(
		refreshTokenHandler,
		newRefreshTokenArgs,
		newRefreshTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Logout": kitex.NewMethodInfo(
		logoutHandler,
		newLogoutArgs,
		newLogoutResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CheckPermission": kitex.NewMethodInfo(
		checkPermissionHandler,
		newCheckPermissionArgs,
		newCheckPermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AddUserRole": kitex.NewMethodInfo(
		addUserRoleHandler,
		newAddUserRoleArgs,
		newAddUserRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RemoveUserRole": kitex.NewMethodInfo(
		removeUserRoleHandler,
		newRemoveUserRoleArgs,
		newRemoveUserRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserRole": kitex.NewMethodInfo(
		getUserRoleHandler,
		newGetUserRoleArgs,
		newGetUserRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	authServiceServiceInfo                = NewServiceInfo()
	authServiceServiceInfoForClient       = NewServiceInfoForClient()
	authServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*auth.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func issueTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.IssueTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).IssueToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *IssueTokenArgs:
		success, err := handler.(auth.AuthService).IssueToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IssueTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newIssueTokenArgs() interface{} {
	return &IssueTokenArgs{}
}

func newIssueTokenResult() interface{} {
	return &IssueTokenResult{}
}

type IssueTokenArgs struct {
	Req *auth.IssueTokenRequest
}

func (p *IssueTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.IssueTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IssueTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IssueTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IssueTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IssueTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth.IssueTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IssueTokenArgs_Req_DEFAULT *auth.IssueTokenRequest

func (p *IssueTokenArgs) GetReq() *auth.IssueTokenRequest {
	if !p.IsSetReq() {
		return IssueTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IssueTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IssueTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IssueTokenResult struct {
	Success *auth.IssueTokenResponse
}

var IssueTokenResult_Success_DEFAULT *auth.IssueTokenResponse

func (p *IssueTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.IssueTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IssueTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IssueTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IssueTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IssueTokenResult) Unmarshal(in []byte) error {
	msg := new(auth.IssueTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IssueTokenResult) GetSuccess() *auth.IssueTokenResponse {
	if !p.IsSetSuccess() {
		return IssueTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IssueTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.IssueTokenResponse)
}

func (p *IssueTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IssueTokenResult) GetResult() interface{} {
	return p.Success
}

func verifyTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.VerifyTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).VerifyToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *VerifyTokenArgs:
		success, err := handler.(auth.AuthService).VerifyToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VerifyTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newVerifyTokenArgs() interface{} {
	return &VerifyTokenArgs{}
}

func newVerifyTokenResult() interface{} {
	return &VerifyTokenResult{}
}

type VerifyTokenArgs struct {
	Req *auth.VerifyTokenRequest
}

func (p *VerifyTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.VerifyTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VerifyTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VerifyTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VerifyTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *VerifyTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth.VerifyTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VerifyTokenArgs_Req_DEFAULT *auth.VerifyTokenRequest

func (p *VerifyTokenArgs) GetReq() *auth.VerifyTokenRequest {
	if !p.IsSetReq() {
		return VerifyTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VerifyTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VerifyTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type VerifyTokenResult struct {
	Success *auth.VerifyTokenResponse
}

var VerifyTokenResult_Success_DEFAULT *auth.VerifyTokenResponse

func (p *VerifyTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.VerifyTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VerifyTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VerifyTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VerifyTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *VerifyTokenResult) Unmarshal(in []byte) error {
	msg := new(auth.VerifyTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VerifyTokenResult) GetSuccess() *auth.VerifyTokenResponse {
	if !p.IsSetSuccess() {
		return VerifyTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VerifyTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.VerifyTokenResponse)
}

func (p *VerifyTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VerifyTokenResult) GetResult() interface{} {
	return p.Success
}

func refreshTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.RefreshTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).RefreshToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RefreshTokenArgs:
		success, err := handler.(auth.AuthService).RefreshToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RefreshTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRefreshTokenArgs() interface{} {
	return &RefreshTokenArgs{}
}

func newRefreshTokenResult() interface{} {
	return &RefreshTokenResult{}
}

type RefreshTokenArgs struct {
	Req *auth.RefreshTokenRequest
}

func (p *RefreshTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.RefreshTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RefreshTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RefreshTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RefreshTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RefreshTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth.RefreshTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RefreshTokenArgs_Req_DEFAULT *auth.RefreshTokenRequest

func (p *RefreshTokenArgs) GetReq() *auth.RefreshTokenRequest {
	if !p.IsSetReq() {
		return RefreshTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RefreshTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RefreshTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RefreshTokenResult struct {
	Success *auth.RefreshTokenResponse
}

var RefreshTokenResult_Success_DEFAULT *auth.RefreshTokenResponse

func (p *RefreshTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.RefreshTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RefreshTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RefreshTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RefreshTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RefreshTokenResult) Unmarshal(in []byte) error {
	msg := new(auth.RefreshTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RefreshTokenResult) GetSuccess() *auth.RefreshTokenResponse {
	if !p.IsSetSuccess() {
		return RefreshTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RefreshTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.RefreshTokenResponse)
}

func (p *RefreshTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RefreshTokenResult) GetResult() interface{} {
	return p.Success
}

func logoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.LogoutRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).Logout(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LogoutArgs:
		success, err := handler.(auth.AuthService).Logout(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LogoutResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLogoutArgs() interface{} {
	return &LogoutArgs{}
}

func newLogoutResult() interface{} {
	return &LogoutResult{}
}

type LogoutArgs struct {
	Req *auth.LogoutRequest
}

func (p *LogoutArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.LogoutRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LogoutArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LogoutArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LogoutArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LogoutArgs) Unmarshal(in []byte) error {
	msg := new(auth.LogoutRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LogoutArgs_Req_DEFAULT *auth.LogoutRequest

func (p *LogoutArgs) GetReq() *auth.LogoutRequest {
	if !p.IsSetReq() {
		return LogoutArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LogoutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LogoutArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LogoutResult struct {
	Success *auth.LogoutResponse
}

var LogoutResult_Success_DEFAULT *auth.LogoutResponse

func (p *LogoutResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.LogoutResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LogoutResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LogoutResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LogoutResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LogoutResult) Unmarshal(in []byte) error {
	msg := new(auth.LogoutResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LogoutResult) GetSuccess() *auth.LogoutResponse {
	if !p.IsSetSuccess() {
		return LogoutResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LogoutResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.LogoutResponse)
}

func (p *LogoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LogoutResult) GetResult() interface{} {
	return p.Success
}

func checkPermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.PermissionCheckRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).CheckPermission(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckPermissionArgs:
		success, err := handler.(auth.AuthService).CheckPermission(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckPermissionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckPermissionArgs() interface{} {
	return &CheckPermissionArgs{}
}

func newCheckPermissionResult() interface{} {
	return &CheckPermissionResult{}
}

type CheckPermissionArgs struct {
	Req *auth.PermissionCheckRequest
}

func (p *CheckPermissionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.PermissionCheckRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckPermissionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckPermissionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckPermissionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckPermissionArgs) Unmarshal(in []byte) error {
	msg := new(auth.PermissionCheckRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckPermissionArgs_Req_DEFAULT *auth.PermissionCheckRequest

func (p *CheckPermissionArgs) GetReq() *auth.PermissionCheckRequest {
	if !p.IsSetReq() {
		return CheckPermissionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckPermissionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckPermissionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckPermissionResult struct {
	Success *auth.PermissionCheckResponse
}

var CheckPermissionResult_Success_DEFAULT *auth.PermissionCheckResponse

func (p *CheckPermissionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.PermissionCheckResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckPermissionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckPermissionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckPermissionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckPermissionResult) Unmarshal(in []byte) error {
	msg := new(auth.PermissionCheckResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckPermissionResult) GetSuccess() *auth.PermissionCheckResponse {
	if !p.IsSetSuccess() {
		return CheckPermissionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckPermissionResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.PermissionCheckResponse)
}

func (p *CheckPermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckPermissionResult) GetResult() interface{} {
	return p.Success
}

func addUserRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.AddUserRoleRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).AddUserRole(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddUserRoleArgs:
		success, err := handler.(auth.AuthService).AddUserRole(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddUserRoleResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddUserRoleArgs() interface{} {
	return &AddUserRoleArgs{}
}

func newAddUserRoleResult() interface{} {
	return &AddUserRoleResult{}
}

type AddUserRoleArgs struct {
	Req *auth.AddUserRoleRequest
}

func (p *AddUserRoleArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.AddUserRoleRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddUserRoleArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddUserRoleArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddUserRoleArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddUserRoleArgs) Unmarshal(in []byte) error {
	msg := new(auth.AddUserRoleRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddUserRoleArgs_Req_DEFAULT *auth.AddUserRoleRequest

func (p *AddUserRoleArgs) GetReq() *auth.AddUserRoleRequest {
	if !p.IsSetReq() {
		return AddUserRoleArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddUserRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddUserRoleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddUserRoleResult struct {
	Success *auth.AddUserRoleResponse
}

var AddUserRoleResult_Success_DEFAULT *auth.AddUserRoleResponse

func (p *AddUserRoleResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.AddUserRoleResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddUserRoleResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddUserRoleResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddUserRoleResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddUserRoleResult) Unmarshal(in []byte) error {
	msg := new(auth.AddUserRoleResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddUserRoleResult) GetSuccess() *auth.AddUserRoleResponse {
	if !p.IsSetSuccess() {
		return AddUserRoleResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddUserRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.AddUserRoleResponse)
}

func (p *AddUserRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddUserRoleResult) GetResult() interface{} {
	return p.Success
}

func removeUserRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.RemoveUserRoleRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).RemoveUserRole(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RemoveUserRoleArgs:
		success, err := handler.(auth.AuthService).RemoveUserRole(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RemoveUserRoleResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRemoveUserRoleArgs() interface{} {
	return &RemoveUserRoleArgs{}
}

func newRemoveUserRoleResult() interface{} {
	return &RemoveUserRoleResult{}
}

type RemoveUserRoleArgs struct {
	Req *auth.RemoveUserRoleRequest
}

func (p *RemoveUserRoleArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.RemoveUserRoleRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RemoveUserRoleArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RemoveUserRoleArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RemoveUserRoleArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RemoveUserRoleArgs) Unmarshal(in []byte) error {
	msg := new(auth.RemoveUserRoleRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RemoveUserRoleArgs_Req_DEFAULT *auth.RemoveUserRoleRequest

func (p *RemoveUserRoleArgs) GetReq() *auth.RemoveUserRoleRequest {
	if !p.IsSetReq() {
		return RemoveUserRoleArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RemoveUserRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RemoveUserRoleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RemoveUserRoleResult struct {
	Success *auth.RemoveUserRoleResponse
}

var RemoveUserRoleResult_Success_DEFAULT *auth.RemoveUserRoleResponse

func (p *RemoveUserRoleResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.RemoveUserRoleResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RemoveUserRoleResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RemoveUserRoleResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RemoveUserRoleResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RemoveUserRoleResult) Unmarshal(in []byte) error {
	msg := new(auth.RemoveUserRoleResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RemoveUserRoleResult) GetSuccess() *auth.RemoveUserRoleResponse {
	if !p.IsSetSuccess() {
		return RemoveUserRoleResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RemoveUserRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.RemoveUserRoleResponse)
}

func (p *RemoveUserRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoveUserRoleResult) GetResult() interface{} {
	return p.Success
}

func getUserRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.GetUserRoleRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).GetUserRole(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserRoleArgs:
		success, err := handler.(auth.AuthService).GetUserRole(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserRoleResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserRoleArgs() interface{} {
	return &GetUserRoleArgs{}
}

func newGetUserRoleResult() interface{} {
	return &GetUserRoleResult{}
}

type GetUserRoleArgs struct {
	Req *auth.GetUserRoleRequest
}

func (p *GetUserRoleArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.GetUserRoleRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserRoleArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserRoleArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserRoleArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserRoleArgs) Unmarshal(in []byte) error {
	msg := new(auth.GetUserRoleRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserRoleArgs_Req_DEFAULT *auth.GetUserRoleRequest

func (p *GetUserRoleArgs) GetReq() *auth.GetUserRoleRequest {
	if !p.IsSetReq() {
		return GetUserRoleArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserRoleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserRoleResult struct {
	Success *auth.GetUserRoleResponse
}

var GetUserRoleResult_Success_DEFAULT *auth.GetUserRoleResponse

func (p *GetUserRoleResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.GetUserRoleResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserRoleResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserRoleResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserRoleResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserRoleResult) Unmarshal(in []byte) error {
	msg := new(auth.GetUserRoleResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserRoleResult) GetSuccess() *auth.GetUserRoleResponse {
	if !p.IsSetSuccess() {
		return GetUserRoleResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.GetUserRoleResponse)
}

func (p *GetUserRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserRoleResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) IssueToken(ctx context.Context, Req *auth.IssueTokenRequest) (r *auth.IssueTokenResponse, err error) {
	var _args IssueTokenArgs
	_args.Req = Req
	var _result IssueTokenResult
	if err = p.c.Call(ctx, "IssueToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyToken(ctx context.Context, Req *auth.VerifyTokenRequest) (r *auth.VerifyTokenResponse, err error) {
	var _args VerifyTokenArgs
	_args.Req = Req
	var _result VerifyTokenResult
	if err = p.c.Call(ctx, "VerifyToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefreshToken(ctx context.Context, Req *auth.RefreshTokenRequest) (r *auth.RefreshTokenResponse, err error) {
	var _args RefreshTokenArgs
	_args.Req = Req
	var _result RefreshTokenResult
	if err = p.c.Call(ctx, "RefreshToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Logout(ctx context.Context, Req *auth.LogoutRequest) (r *auth.LogoutResponse, err error) {
	var _args LogoutArgs
	_args.Req = Req
	var _result LogoutResult
	if err = p.c.Call(ctx, "Logout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckPermission(ctx context.Context, Req *auth.PermissionCheckRequest) (r *auth.PermissionCheckResponse, err error) {
	var _args CheckPermissionArgs
	_args.Req = Req
	var _result CheckPermissionResult
	if err = p.c.Call(ctx, "CheckPermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddUserRole(ctx context.Context, Req *auth.AddUserRoleRequest) (r *auth.AddUserRoleResponse, err error) {
	var _args AddUserRoleArgs
	_args.Req = Req
	var _result AddUserRoleResult
	if err = p.c.Call(ctx, "AddUserRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveUserRole(ctx context.Context, Req *auth.RemoveUserRoleRequest) (r *auth.RemoveUserRoleResponse, err error) {
	var _args RemoveUserRoleArgs
	_args.Req = Req
	var _result RemoveUserRoleResult
	if err = p.c.Call(ctx, "RemoveUserRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserRole(ctx context.Context, Req *auth.GetUserRoleRequest) (r *auth.GetUserRoleResponse, err error) {
	var _args GetUserRoleArgs
	_args.Req = Req
	var _result GetUserRoleResult
	if err = p.c.Call(ctx, "GetUserRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
